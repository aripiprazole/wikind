use Kind.API as API
use Kind.Result as Result
use Kind.Error as Error

API/output (res: List (Pair Kind.Name (List (Kind.Result Unit)))): List (Error/Quoted)
API/output (List.nil t)            = List.nil
API/output (List.cons t pair rest) =
  // TODO: Check why i cant simply type check on the pair
  let Pair.new fst snd = pair
  List.concat (API/output.function fst snd) (API/output rest)

API/output.function (fnid: Kind.Name) (ls: List (Kind.Result Unit)): List (Error/Quoted)
API/output.function fnid (List.nil t) = List.nil

API/output.function fnid (List.cons t (Result/checked a ctx dep rhs sub eqt err val) checks) =
  API/output.function.show_errors err sub fnid checks

API/output.function fnid (List.cons t (Result/errored a ctx sub err) checks) =
  API/output.function.show_errors err sub fnid checks

API/output.function.show_errors (ls: List Kind.Error) (sub: Kind.Subst) (fnid: Kind.Name) (res: List (Kind.Result Unit)): List (Error/Quoted)
API/output.function.show_errors (List.nil t) sub fnid checks = API/output.function fnid checks

API/output.function.show_errors (List.cons t err errs) sub fnid checks =
  (List.cons
    (API/output.error fnid err sub)
    (API/output.function.show_errors errs sub fnid checks))

API/output.error (fnid: Kind.Name) (err: (Kind.Error)) (sub: (Kind.Subst)) : Error/Quoted
API/output.error fnid err sub = Error/quote err sub