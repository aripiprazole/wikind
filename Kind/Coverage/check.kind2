Coverage/Maker.make (maker: Coverage/Maker) (type: Kind.Term) (and_then: Kind.Term -> Coverage/Type) : Coverage/Type
Coverage/Maker.make (Coverage/Maker.Cons name typ body) cur_type and_then = Coverage/Type.cons 0 97 typ [] (arg => Coverage/Maker.make (body arg) cur_type and_then)
Coverage/Maker.make (Coverage/Maker.End other)          cur_type and_then =
    let name   = Maybe.bind (Coverage/get_name cur_type) (x => let size = Axiom/Family.Indices x; U60.if size (Maybe.some size) Maybe.none)
    let result = and_then other
    match Maybe name with result {
        some => Coverage/Maker.add_constraint result other cur_type
        none => result
    }
