use Kind.Context as Context
use Kind.Name as Name
use Kind.Term as Term
use Kind.Printer as Printer

Context/show.type (name: U60) (type: Kind.Term) (sub: Kind.Subst) (pad: U60): String
Context/show.type name type sub pad =
  Printer/text [ "- "
                      (String.pad_right (U60.to_nat pad) ' ' (Name/show name))
                      " : "
                      (String.cut (Term/show (Term/fill type sub)))
                      String.new_line
                    ]

Context/show.vals (name: U60) (vals: List Kind.Term) (sub: Kind.Subst) (pad: U60): String
Context/show.vals name (List.nil t)           sub pad = String.nil
Context/show.vals name (List.cons t val vals) sub pad =
  Printer/text [ (Printer/color "2")
                      "- "
                      (String.pad_right (U60.to_nat pad) ' ' (Name/show name))
                      " = "
                      (String.cut (Term/show (Term/fill val sub)))
                      (Printer/color "0")
                      String.new_line
                      (Context/show.vals name vals sub pad)
                    ]

Context/show.go (ctx: Kind.Context) (subst: Kind.Subst) (pad: U60): String
Context/show.go Context/empty                       sub pad = String.nil
Context/show.go (Context/entry name type vals rest) sub pad =
  Printer/text [ (Context/show.type name type sub pad)
                      (Context/show.vals name vals sub pad)
                      (Context/show.go rest sub pad)
                    ]

Context/show (ctx: Kind.Context) (subst: Kind.Subst): String
Context/show ctx subst = Context/show.go ctx subst (Context/max_name_length ctx)