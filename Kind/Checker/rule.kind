use Kind.Checker as Checker
use Kind.Rule as Rule
use Kind.Term as Term
use Kind.Error as Error

//! Checks a @Kind.Rule@ against a term.
//! Example:
//!
//! @
//! pred (n: Nat): Nat
//! pred (S n) = n
//! @
//!
//! In the example above, we have a rule that starts with a
//! left hand side part ((S n)) that will have to check
//! against the pi type that `pred` declarated in order to
//! succeded.
Checker/rule (rule: Kind.Rule) (term: Kind.Term): Kind.Checker Unit

Checker/rule (Rule/lhs arg args) (Term/all orig name type body) =
  do Kind.Checker {
    Checker/check arg type
    Checker/rule args (body arg)
    return Unit.new
  }

Checker/rule (Rule/lhs arg args) other =
  do Kind.Checker {
    ask ctx = Checker/get_context
    (Checker/fail (Error/too_many_arguments ctx (Term/get_origin arg (orig => term => orig))))
  }

Checker/rule (Kind.Rule.rhs expr) type =
  do Kind.Checker {
    Checker/set_right_hand_side Bool.true
    Checker/check expr type
    return Unit.new
  }