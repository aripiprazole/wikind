use Kind.Term as Term
use Kind.Operator as Operator

// Evaluates an operation term.
Term/eval_op (orig: U60) (op: Kind.Operator) (left: Kind.Term) (right: Kind.Term): Kind.Term
Term/eval_op orig Operator/add (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (+  a.num b.num)
Term/eval_op orig Operator/sub (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (-  a.num b.num)
Term/eval_op orig Operator/mul (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (*  a.num b.num)
Term/eval_op orig Operator/div (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (/  a.num b.num)
Term/eval_op orig Operator/mod (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (%  a.num b.num)
Term/eval_op orig Operator/and (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (&  a.num b.num)
Term/eval_op orig Operator/or  (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (|  a.num b.num)
Term/eval_op orig Operator/xor (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (^  a.num b.num)
Term/eval_op orig Operator/shl (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (<< a.num b.num)
Term/eval_op orig Operator/shr (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (>> a.num b.num)
Term/eval_op orig Operator/ltn (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (<  a.num b.num)
Term/eval_op orig Operator/lte (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (<= a.num b.num)
Term/eval_op orig Operator/eql (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (== a.num b.num)
Term/eval_op orig Operator/gte (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (>= a.num b.num)
Term/eval_op orig Operator/gtn (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (>  a.num b.num)
Term/eval_op orig Operator/neq (Term/u60 a.orig a.num) (Term/u60 b.orig b.num) = Term/u60 0 (!= a.num b.num)
Term/eval_op orig op                left                         right              = Term/op2 orig op left right
