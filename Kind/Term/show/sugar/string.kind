use Kind.Term as Term
use Kind.Printer as Printer

#axiom
%String.nil  : Kind.Name

#axiom
%String.cons : Kind.Name

Term/show.sugar.string.go (term: Kind.Term): Maybe String
Term/show.sugar.string.go (Term/ct0 %String.nil  orig) = Maybe.some String.nil
Term/show.sugar.string.go (Term/ct2 %String.cons orig (Term/u60 orig1 x0) x1) =
  do Maybe {
    ask tail = Term/show.sugar.string.go x1
    return String.cons x0 tail
  }
Term/show.sugar.string.go other = Maybe.none

Term/show.sugar.string (term: Kind.Term): Maybe String
Term/show.sugar.string term =
  do Maybe {
    ask res  = Term/show.sugar.string.go term
    let quot = "'"
    return (Printer/text [quot res quot])
  }