#kdl_name = Bitsmap_up
Bits.Map.update <a> 
  (map: Bits.Map a)
  (key: Bits)
  (func: a -> a)
: Bits.Map a

// Bits.e
Bits.Map.update a (Bits.Map.tie t (Maybe.none x) left right) Bits.e func = 
  let value = Maybe.none
  Bits.Map.tie t value left right

Bits.Map.update a (Bits.Map.tie t (Maybe.some x value) left right) Bits.e func =
  let value = Maybe.some (func value)
  Bits.Map.tie t value left right

// Bits.o
Bits.Map.update a (Bits.Map.new t) (Bits.o pred) func =
  let value = Maybe.none
  let left  = Bits.Map.update (Bits.Map.new t) pred func
  let right = Bits.Map.new
  Bits.Map.tie value left right  

Bits.Map.update a (Bits.Map.tie t value left right) (Bits.o pred) func = 
  let left = Bits.Map.update left pred func
  Bits.Map.tie t value left right

// Bits.i
Bits.Map.update a (Bits.Map.new t) (Bits.i pred) func = 
  let value = Maybe.none
  let left  = Bits.Map.update a (Bits.Map.new t) pred func
  let right = Bits.Map.new
  Bits.Map.tie t value left right

Bits.Map.update a (Bits.Map.tie t value left right) (Bits.i pred) func =
  let right = Bits.Map.update right pred func
  Bits.Map.tie t value left right
