record Zipper (a : Type) {
    start : List a
    end   : List a
}

Zipper.from_list <a> (b: List a) : Zipper a
Zipper.from_list ls = Zipper.new List.nil ls

Zipper.to_list <a> (b: Zipper a) : List a
Zipper.to_list a (Zipper.new start end) = List.concat (List.reverse start) end

Zipper.move <a> (b: Zipper a) : Zipper a
Zipper.move (Zipper.new start (List.cons x xs)) = Zipper.new (List.cons x start) xs
Zipper.move (Zipper.new start List.nil) = Zipper.new start List.nil

Zipper.delete <a> (b: Zipper a) : Zipper a
Zipper.delete (Zipper.new start (List.cons x xs)) = Zipper.new start xs
Zipper.delete (Zipper.new start List.nil) = Zipper.new start List.nil

Zipper.current <a> (b: Zipper a) : Maybe a
Zipper.current (Zipper.new start (List.cons x xs)) = Maybe.some x
Zipper.current (Zipper.new start List.nil)         = Maybe.none

Zipper.add <a> (zipper: Zipper a) (elem: a) : Zipper a
Zipper.add (Zipper.new start end) elem = Zipper.new start (List.cons elem end)

Zipper.remove <a> (b: Zipper a) : Maybe (Pair a (Zipper a))
Zipper.remove a (Zipper.new fst snd) =
    do Maybe {
        ask head = List.head snd
        Maybe.some (Pair.new head (Zipper.new fst (List.tail snd)))
    }

Zipper.add_mass <a> (zipper: Zipper a) (elems: List a) : Zipper a
Zipper.add_mass (Zipper.new start end) elems = Zipper.new start (List.concat elems end)

Zipper.is_at_the_end <a> (b: Zipper a) : Bool
Zipper.is_at_the_end a (Zipper.new _ end) = List.is_nil end