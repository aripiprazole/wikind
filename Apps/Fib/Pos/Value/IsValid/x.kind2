// for every x y, if x < 160: ((( y << 8) | x) & 255) < 160
#kdl_name = Fib_pos_vivx
Apps.Fib.Pos.Value.IsValid.x (x: U120) (y: U120) (e0: Equal Bool (U120.less_than x (U120.new 0 160)) Bool.true) : Equal Bool (U120.less_than (U120.bitwise_and (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 255)) (U120.new 0 160)) Bool.true {
  let e1    = U120.and.pass_or (U120.shift_left y (U120.new 0 8)) x (U120.new 0 255)
  let e2    = U120.shift_left.mask_zero y (U120.new 0 8)
  let e1._1 = Equal.rewrite e2 (k => Equal U120 (U120.bitwise_and (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 255)) (U120.bitwise_or k (U120.bitwise_and x (U120.new 0 255)))) e1
  let e3    = U120.or.zero_left (U120.bitwise_and x (U120.new 0 255))
  let e1._2 = Equal.rewrite e3 (k => Equal U120 (U120.bitwise_and (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 255)) k ) e1._1
  let e4    = U120.and.less_equal_a x (U120.new 0 255)
  let e5    = U120.IsLessEqual.chain.less_than (U120.bitwise_and x (U120.new 0 255)) x (U120.new 0 160) e4 e0
  let e5._1 = Equal.rewrite (Equal.mirror e1._2) (k => Equal Bool (U120.less_than k (U120.new 0 160)) Bool.true) e5
  e5._1
  }


  // x  = U120.mod x 160
  // e0 = U120.mod x 160 < 160