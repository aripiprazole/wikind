// Shorthand for program writing
V.group (g: (List User.Franchu.ConcLang.Value)): User.Franchu.ConcLang.Value
V.group g = (User.Franchu.ConcLang.Value.word (User.Franchu.ConcLang.Word.group g))

V.extern (g: User.Franchu.ConcLang.ProgramState -> User.Franchu.ConcLang.ProgramState): User.Franchu.ConcLang.Value
V.extern g = (User.Franchu.ConcLang.Value.word (User.Franchu.ConcLang.Word.extern g))

V.push_kind2_val <type: Type> (value: type): User.Franchu.ConcLang.Value
V.push_kind2_val type value = (User.Franchu.ConcLang.Value.word (User.Franchu.ConcLang.Word.extern
	@state(User.Franchu.ConcLang.ProgramState.match
		state
		@state(User.Franchu.ConcLang.ProgramState)
		@queue@stack(User.Franchu.ConcLang.ProgramState.new queue (List.cons (User.Franchu.ConcLang.Value.data value) stack))
	)
))


X.nat_succ (state: User.Franchu.ConcLang.ProgramState): User.Franchu.ConcLang.ProgramState
X.nat_succ (User.Franchu.ConcLang.ProgramState.new
	(List.cons User.Franchu.ConcLang.Value (User.Franchu.ConcLang.Value.data Nat n) s_tail)
	queue
) = 
	(User.Franchu.ConcLang.ProgramState.new (List.cons User.Franchu.ConcLang.Value (User.Franchu.ConcLang.Value.data Nat (Nat.succ n)) s_tail) queue)
	


V.nat_succ: User.Franchu.ConcLang.Value
V.nat_succ = (User.Franchu.ConcLang.Value.word (User.Franchu.ConcLang.Word.extern
	@x(X.nat_succ x)
))

GetStack (p: User.Franchu.ConcLang.ProgramState): (List User.Franchu.ConcLang.Value)
GetStack (User.Franchu.ConcLang.ProgramState.new stack queue) = stack

Main: _
Main = 
	let do_dup = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.dup)
	let enstack = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.enstack)
	let enqueue = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.enqueue)
	let cache = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.cache)
	let decache = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.decache)
	let swap = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.swap)
	let close = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.close)
	let discard = (User.Franchu.ConcLang.Value.word User.Franchu.ConcLang.Word.discard)
	
	
	let church_true = (V.group [
		discard
		enqueue
	])	
	let church_false = (V.group [
		swap
		discard
		enqueue
	])
	let church_and = (V.group [
		// Cache the first bool
		cache
		// Cache the second bool
		cache
		// First case: if a == true, then a & b = b
		enstack (V.group [
			decache
		])
		// Second case: if a == false, then a & b = false
		enstack (V.group [
			// Discard B because we don't care.
			decache
			discard
			// Put false at the top of the stack
			enstack church_false
		])
		// Decache the second bool and run it on the two cases.
		decache
		enqueue
	])
	let church_or = (V.group [
		// Try reading church_and and figure out how tis one works.
		cache
		cache
		enstack (V.group [
			decache
			discard
			enstack church_true
		])
		enstack (V.group [
			decache
		])
		decache
		enqueue
	])
	let example_church_and = (V.group [
		enstack
		church_true // Try changing this
		enstack
		church_true // And this
		church_and
		
		cache
		// These two values are used for displaying
		(V.push_kind2_val Bool.true)
		(V.push_kind2_val Bool.false)
		decache
		enqueue
	])
	let identity = (V.group List.nil)
	let church_zero = discard
	let church_one = enqueue
	let church_two = (V.group [
		// Duplicate the function because we'll call it twice
		do_dup
		// Cache a copy
		cache
		// Run the other one
		enqueue
		// Decache the copy of the function
		decache
		// Run it
		enqueue
	])
	let church_succ = (V.group [
		cache
		enstack (V.group [
			// stack: (value function predecessor)
			// cache predecessor
			cache
			do_dup
			cache
			// run function on value
			enqueue
			// stack: (succ value)
			// decache function and and run it
			decache decache
			enqueue
			// stack = (predecessor (succ value))
		])
		// Make sure the group has the predecessor at the
		// top of its stack when it runs.
		decache
		close
		enstack
		enstack
		close
	])
	let program = (User.Franchu.ConcLang.ProgramState.new [
	] 
	[
		enstack church_zero
		church_succ
		church_succ
		church_succ
		church_succ
		church_succ
		church_succ

		// To display:
		cache
		(V.push_kind2_val Nat.zero)
		enstack V.nat_succ
		decache
		enqueue
	])
	
	let program = (User.Franchu.ConcLang.ProgramState.execute program)
	(User.Franchu.ConcLang.Value.display (V.group (GetStack program)))
