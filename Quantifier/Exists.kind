// A helper datatype to ensure that your proof is an existence proof.

// This is a well known definition in logic:
// ∃x(p(x)) = ~∀x(~p(x))
// It means that "there exists an x such that p(x) is true"
// is equivalent to  "it is false that for all x, p(x) is false"

// ∀x(p(x)) in Kind2 is translated as (x: Set)([p(x)])
// so for example if p(x: Nat) = x == 0 then ∀x(p(x)) is:
// (x: Nat)(Equal Nat x Nat.zero)

// the provability of ~p can be translated to the existence of a function that takes in p and returns Empty
// p can be, for example, (Equal Nat Nat.zero (Nat.succ Nat.zsero))
// (proposition: p)Empty

// Therefore, ~p(x) is the existence of a function that takes in x, and returns a function that takes in p, and returns  empty
// (x: Nat)((proposition: p)Empty)

// Therefore ∀x(~p(x)) is (x: Nat)((proposition: p)Empty)
// (read: for all x, you can prove Empty with p(x))
// and ~∀x(~p(x)) is thus (prop: (all: (x: Nat)((proposition: p)Empty))Empty)

// If you have a value of this type, it means that you know that there exists at least
// one object in `set` such that (proposition set) exists (which means that it is constructible)
Quantifier.Exists <set: Type> <proposition: set -> Type>: Type
Quantifier.Exists set proposition = Not (Quantifier.Forall set (value => Not (proposition value)))
